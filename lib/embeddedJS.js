// Generated by CoffeeScript 1.6.3
(function() {
  exports.getEmbeddedJS = function(labels) {
    var embedded, k, scope, v;
    scope = module.exports.setClientScope({}, labels);
    embedded = "\n<![CDATA[\n";
    embedded += "var mapReporting = {";
    for (k in scope) {
      v = scope[k];
      embedded += "\n" + k + " : ";
      embedded += (v != null) && typeof v === "function" ? v.toString() : (v != null) && typeof v === "object" ? JSON.stringify(v) : null;
      embedded += ",";
    }
    return embedded += "};\n]]>";
  };

  exports.setClientScope = function(scope, labels) {
    scope.usingAlternateColor = false;
    scope.labels = labels;
    scope.toArray = function(obj) {
      return Array.prototype.slice.call(obj, 0);
    };
    scope.removeClass = function(element, name) {
      return element.setAttribute("class", element.getAttribute("class").split(" ").filter(function(a) {
        return a !== name;
      }).join(" "));
    };
    scope.removeAllClass = function(name) {
      var selected, _i, _len, _ref, _results;
      _ref = this.toArray(this.head.querySelectorAll("." + name));
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selected = _ref[_i];
        _results.push(this.removeClass(selected, name));
      }
      return _results;
    };
    scope.addClass = function(element, name) {
      var arr;
      arr = element.getAttribute("class").split(" ");
      arr.push(name);
      return element.setAttribute("class", arr.join(" "));
    };
    scope.hasClass = function(element, name) {
      return (element.getAttribute("class").split(" ")).indexOf(name) >= 0;
    };
    scope.somethingIsSelected = function() {
      return (this.toArray(this.head.querySelectorAll(".selected"), 0)).length > 0;
    };
    scope.displayShapeInDashboard = function(shape) {
      this.head.querySelector("#dashboardTitle").firstChild.nodeValue = shape.getAttribute("id") + " " + shape.getAttribute("name");
      this.head.querySelector("#dashboardLink").setAttribute("xlink:href", shape.getAttribute("link").replace(/&/g, "%26"));
      this.head.querySelector("#dashboardLink").setAttribute("href", shape.getAttribute("link").replace(/&/g, "%26"));
      this.head.querySelector("#dashboardLinkText").firstChild.nodeValue = this.labels.link;
      return this.head.querySelector("#dashboardSatisfaction").firstChild.nodeValue = this.labels.value + shape.getAttribute("value");
    };
    scope.emptyDashboard = function() {
      this.head.querySelector("#dashboardTitle").firstChild.nodeValue = "Nothing selected";
      this.head.querySelector("#dashboardLinkText").firstChild.nodeValue = "";
      return this.head.querySelector("#dashboardSatisfaction").firstChild.nodeValue = "";
    };
    scope.displaySelected = function() {
      var selected, _i, _len, _ref, _results;
      _ref = this.toArray(this.head.querySelectorAll(".selected"));
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selected = _ref[_i];
        _results.push(this.displayShapeInDashboard(selected));
      }
      return _results;
    };
    scope.putOnTop = function(shape) {
      var id;
      this.head.appendChild(shape);
      id = this.head.querySelector("#id" + shape.getAttribute("id"));
      if (id != null) {
        return this.head.appendChild(id);
      } else {
        return console.log(shape.getAttribute("id"));
      }
    };
    scope.putSelectedOnTop = function() {
      var selected, _i, _len, _ref, _results;
      _ref = this.toArray(this.head.querySelectorAll(".selected"));
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selected = _ref[_i];
        _results.push(this.putOnTop(selected));
      }
      return _results;
    };
    scope.mouseOver = function(shape) {
      this.head = shape.parentNode;
      if (!this.hasClass(shape, "selected")) {
        this.addClass(shape, "hovered");
      }
      this.putOnTop(shape);
      this.putSelectedOnTop();
      return this.displayShapeInDashboard(shape);
    };
    scope.mouseOut = function(shape) {
      this.head = shape.parentNode;
      this.removeClass(shape, "hovered");
      if (this.somethingIsSelected()) {
        return this.displaySelected();
      } else {
        return this.emptyDashboard();
      }
    };
    scope.mouseDown = function(shape) {
      var isSelected;
      this.head = shape.parentNode;
      isSelected = this.hasClass(shape, "selected");
      this.removeAllClass("selected");
      if (isSelected) {
        this.addClass(shape, "hovered");
      } else {
        this.removeClass(shape, "hovered");
        this.addClass(shape, "selected");
      }
      return this.putOnTop(shape);
    };
    scope.shapeOver = function(evt) {
      return this.mouseOver(evt.target);
    };
    scope.shapeOut = function(evt) {
      return this.mouseOut(evt.target);
    };
    scope.shapeDown = function(evt) {
      return this.mouseDown(evt.target);
    };
    scope.IDover = function(evt) {
      return this.mouseOver(evt.target.parentNode.querySelector("#" + evt.target.getAttribute("id").slice(2)));
    };
    scope.IDout = function(evt) {
      return this.mouseOut(evt.target.parentNode.querySelector("#" + evt.target.getAttribute("id").slice(2)));
    };
    scope.IDdown = function(evt) {
      return this.mouseDown(evt.target.parentNode.querySelector("#" + evt.target.getAttribute("id").slice(2)));
    };
    scope.changeScaleColor = function(evt) {
      var element, elements, _i, _len;
      this.head = evt.target.parentNode.parentNode;
      elements = this.toArray(this.head.querySelectorAll(".good"));
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (this.usingAlternateColor) {
          element.setAttribute("fill", "url(#" + element.getAttribute("initialfilter") + ")");
          element.setAttribute("stroke", element.getAttribute("initialcolor"));
        } else {
          element.setAttribute("fill", "url(#" + element.getAttribute("alternatefilter") + ")");
          element.setAttribute("stroke", element.getAttribute("alternatecolor"));
        }
      }
      return this.usingAlternateColor = !this.usingAlternateColor;
    };
    return scope;
  };

}).call(this);
