// Generated by CoffeeScript 1.6.3
(function() {
  exports.getEmbeddedJS = function(labels) {
    var embedded, k, scope, v;
    scope = module.exports.setClientScope({}, labels);
    embedded = "\n<![CDATA[\n";
    embedded += "var scope = mapReporting = {";
    for (k in scope) {
      v = scope[k];
      embedded += "\n" + k + " : ";
      embedded += (v != null) && typeof v === "function" ? v.toString() : (v != null) && typeof v === "object" ? JSON.stringify(v) : null;
      embedded += ",";
    }
    return embedded += "};\n]]>";
  };

  exports.setClientScope = function(scope, labels) {
    scope.usingAlternateColor = false;
    scope.hoveredStroke = null;
    scope.selectedShape = null;
    scope.selectedStroke = null;
    scope.labels = labels;
    scope.displayShapeInDashboard = function(shape) {
      document.getElementById("dashboardTitle").firstChild.nodeValue = shape.getAttribute("id") + " " + shape.getAttribute("name");
      document.getElementById("dashboardLink").setAttribute("xlink:href", shape.getAttribute("link").replace(/&/g, "%26"));
      document.getElementById("dashboardLink").setAttribute("href", shape.getAttribute("link").replace(/&/g, "%26"));
      document.getElementById("dashboardLinkText").firstChild.nodeValue = this.labels.link;
      return document.getElementById("dashboardSatisfaction").firstChild.nodeValue = this.labels.value + shape.getAttribute("value");
    };
    scope.emptyDashboard = function() {
      document.getElementById("dashboardTitle").firstChild.nodeValue = "Nothing selected";
      document.getElementById("dashboardLinkText").firstChild.nodeValue = "";
      return document.getElementById("dashboardSatisfaction").firstChild.nodeValue = "";
    };
    scope.putOnTop = function(shape) {
      var id;
      this.displayShapeInDashboard(shape);
      document.getElementById("head").appendChild(shape);
      id = document.getElementById("id" + shape.getAttribute("id"));
      if (id !== null) {
        return document.getElementById("head").appendChild(id);
      }
    };
    scope.selectShape = function(shape) {
      this.selectedShape = shape;
      this.selectedStroke = this.hoveredStroke;
      shape.setAttribute("stroke", "#000000");
      shape.setAttribute("stroke-opacity", "1");
      shape.setAttribute("stroke-width", "6");
      return shape.removeAttribute("stroke-dasharray");
    };
    scope.releaseShape = function() {
      this.selectedShape.setAttribute("stroke", this.selectedStroke);
      this.selectedShape.setAttribute("stroke-width", "4");
      this.selectedShape.setAttribute("stroke-opacity", "0.4");
      this.selectedStroke = null;
      return this.selectedShape = null;
    };
    scope.mouseOver = function(evt) {
      this.putOnTop(evt.target);
      if (evt.target !== this.selectedShape) {
        this.hoveredStroke = evt.target.getAttribute("stroke");
        evt.target.setAttribute("stroke", "#000000");
        evt.target.setAttribute("stroke-opacity", "1");
        evt.target.setAttribute("stroke-width", "6");
        return evt.target.setAttribute("stroke-dasharray", "12,8");
      }
    };
    scope.mouseOut = function(evt) {
      if (this.selectedShape !== null) {
        this.putOnTop(this.selectedShape);
      } else {
        this.emptyDashboard();
      }
      evt.target.removeAttribute("stroke-dasharray");
      if (evt.target !== this.selectedShape) {
        evt.target.setAttribute("stroke", this.hoveredStroke);
        evt.target.setAttribute("stroke-opacity", "0.4");
        return evt.target.setAttribute("stroke-width", "4");
      }
    };
    scope.mouseDown = function(evt) {
      if (this.selectedShape === null) {
        return this.selectShape(evt.target);
      } else if (evt.target === this.selectedShape) {
        this.hoveredStroke = this.selectedStroke;
        this.selectedStroke = null;
        this.selectedShape = null;
        return evt.target.setAttribute("stroke-dasharray", "12,8");
      } else {
        this.releaseShape();
        return this.selectShape(evt.target);
      }
    };
    scope.changeScaleColor = function(evt) {
      var element, elements, _i, _len;
      elements = document.getElementsByClassName("good");
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (this.usingAlternateColor) {
          element.setAttribute("fill", "url(#" + element.getAttribute("initialFilter") + ")");
          element.setAttribute("stroke", element.getAttribute("initialColor"));
        } else {
          element.setAttribute("fill", "url(#" + element.getAttribute("alternateFilter") + ")");
          element.setAttribute("stroke", element.getAttribute("alternateColor"));
        }
      }
      return this.usingAlternateColor = !this.usingAlternateColor;
    };
    return scope;
  };

}).call(this);
