// Generated by CoffeeScript 1.6.3
(function() {
  var mapUtils;

  mapUtils = require("./mapUtils");

  exports.Node = (function() {
    function Node(parent, type, inner, cdata) {
      var _ref;
      this.parent = parent;
      this.type = type;
      this.inner = inner != null ? inner : "";
      this.cdata = cdata != null ? cdata : "";
      this.children = [];
      this.attributes = {};
      if ((_ref = this.parent) != null) {
        _ref._addChild(this);
      }
    }

    Node.prototype.setParent = function(obj) {
      if (this.parent == null) {
        this.parent = obj;
        this.parent._addChild(this);
      }
      return this;
    };

    Node.prototype._addChild = function(obj) {
      this.children.push(obj);
      return this;
    };

    Node.prototype.setInner = function(inner) {
      this.inner = inner;
      return this;
    };

    Node.prototype.setAttributes = function(obj) {
      var k, v;
      for (k in obj) {
        v = obj[k];
        this.attributes[k] = v;
      }
      return this;
    };

    Node.prototype.toString = function(indent) {
      var k, node, ret, v;
      if (indent == null) {
        indent = 0;
      }
      ret = mapUtils.strRepeat("\t", indent) + "<" + this.type + ((function() {
        var _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(" " + k + "=\"" + v + "\"");
        }
        return _results;
      }).call(this)).join("");
      if (this.inner.length > 0 || this.cdata.length > 0 || this.children.length > 0) {
        return ret += ">" + this.inner + this.cdata + ((function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push("\n" + node.toString(indent + 1));
          }
          return _results;
        }).call(this)).join("") + "\n" + mapUtils.strRepeat("\t", indent) + "</" + this.type + ">";
      } else {
        return ret += " />";
      }
    };

    Node.prototype.toDOM = function(addTo) {
      var c, el, k, v, _i, _len, _ref, _ref1, _results;
      el = addTo.append(this.type);
      if (this.inner.length > 0) {
        el.text(this.inner);
      }
      _ref = this.attributes;
      for (k in _ref) {
        v = _ref[k];
        if (k.indexOf("xmlns") < 0) {
          el.attr(k, v);
        }
      }
      _ref1 = this.children;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        c = _ref1[_i];
        _results.push(c.toDOM(el));
      }
      return _results;
    };

    return Node;

  })();

}).call(this);
