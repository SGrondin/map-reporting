// Generated by CoffeeScript 1.6.3
(function() {
  var Node, SVG, Shape, defaultCSS, embeddedJS, mapUtils, shapeFromZone,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  embeddedJS = require("./embeddedJS");

  mapUtils = require("./mapUtils");

  SVG = (require("./SVG")).SVG;

  Node = (require("./Node")).Node;

  Shape = (require("./Shape")).Shape;

  defaultCSS = (require("./embeddedCSS")).defaultCSS;

  shapeFromZone = function(zone, config) {
    var shape;
    if (__indexOf.call(zone.coordinates, ";") >= 0) {
      shape = new Shape(zone.ID, zone.link, zone.name, zone.value);
      zone.coordinates.split(";;;").forEach(function(s) {
        s.split(";").forEach(function(vector) {
          return shape.addVector(vector, config.background.x, config.background.y);
        });
        return shape.resetNextInstruction();
      });
    } else {
      shape = new Shape(zone.ID, zone.link, zone.name, zone.value, zone.coordinates);
    }
    return shape;
  };

  exports.generateMap = function(config, zones) {
    var alternateColor, bg, d, dashboardLink, dashboardLinkText, dashboardSatisfaction, dashboardTitle, desaturation, desaturationFilter, halfDown, halfUp, i, image, initialColor, innerPattern, line, n1, n2, n3, pattern, rectangle, scale, scaleNumbers, svg, value, zone, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3;
    svg = new SVG();
    svg.setAttributes({
      width: config.width,
      height: config.height
    });
    svg.setEmbeddedJS(embeddedJS.getEmbeddedJS(config.labels));

    /* Bitmap background*/
    if (((_ref = config.background.url) != null ? _ref.length : void 0) > 0 || ((_ref1 = config.background.base64) != null ? _ref1.length : void 0) > 0) {
      bg = new Node(svg, "image");
      image = ((_ref2 = config.background.base64) != null ? _ref2.length : void 0) > 0 ? "data:image/png;base64," + config.background.base64 : config.background.url;
      bg.setAttributes({
        "xlink:href": image,
        x: config.background.x,
        y: config.background.y,
        height: config.background.height,
        width: config.background.width,
        filter: "url(#fdesaturation)"
      });
    }

    /* Adds shapes to SVG*/
    for (_i = 0, _len = zones.length; _i < _len; _i++) {
      zone = zones[_i];
      (shapeFromZone(zone, config)).addToSVG(svg, config);
    }

    /* Fill pattern*/
    pattern = new Node(null, "pattern");
    pattern.setAttributes({
      width: "10",
      height: "10",
      patternUnits: "userSpaceOnUse"
    });
    innerPattern = new Node(pattern, "path");
    innerPattern.setAttributes({
      "class": "nodatapattern",
      d: "M 0 10 L 10 0 Z"
    });
    svg.addDef(pattern, "dashed");

    /* Desaturation filter*/
    desaturation = new Node(null, "filter");
    desaturation.setAttributes({
      x: 0,
      y: 0
    });
    desaturationFilter = new Node(desaturation, "feColorMatrix");
    desaturationFilter.setAttributes({
      "in": "SourceGraphic",
      type: "saturate",
      values: config.background.saturation
    });
    svg.addDef(desaturation, "desaturation");

    /* Scale*/
    scale = new Node(svg, "g");
    scale.setAttributes({
      onmousedown: "mapReporting.changeScaleColor(evt);"
    });
    halfUp = Math.floor(config.scale.width * (~~config.threshold) / 100);
    halfDown = halfUp + 1;
    for (i = _j = 0; 0 <= halfUp ? _j <= halfUp : _j >= halfUp; i = 0 <= halfUp ? ++_j : --_j) {
      value = i / (halfUp / 100);
      line = new Node(scale, "path");
      line.setAttributes({
        d: "M " + (config.scale.x + i) + " " + (config.scale.y + config.scale.height) + " L " + (config.scale.x + i) + " " + config.scale.y + " Z",
        stroke: mapUtils.getColor(value, "red", true),
        "class": "bad"
      });
    }
    for (i = _k = halfDown, _ref3 = config.scale.width; halfDown <= _ref3 ? _k <= _ref3 : _k >= _ref3; i = halfDown <= _ref3 ? ++_k : --_k) {
      value = (i - halfDown) / ((config.scale.width - halfUp) / 100);
      line = new Node(scale, "path");
      d = "M " + (config.scale.x + i) + " " + (config.scale.y + config.scale.height) + " L " + (config.scale.x + i) + " " + config.scale.y + " Z";
      initialColor = mapUtils.getColor(value, config.scale.initial, false);
      alternateColor = mapUtils.getColor(value, config.scale.alternate, false);
      line.setAttributes({
        d: d,
        stroke: initialColor,
        initialcolor: initialColor,
        alternatecolor: alternateColor,
        "class": "good"
      });
    }
    if (config.scale.showNumbers) {
      scaleNumbers = new Node(svg, "g");
      n1 = new Node(scaleNumbers, "text", "0");
      n1.setAttributes({
        x: config.scale.x,
        y: config.scale.y + config.scale.height + 14,
        "class": "scaleNumbers"
      });
      n2 = new Node(scaleNumbers, "text", config.threshold + "");
      n2.setAttributes({
        x: config.scale.x + halfDown,
        y: config.scale.y + config.scale.height + 14,
        "class": "scaleNumbers"
      });
      n3 = new Node(scaleNumbers, "text", "100");
      n3.setAttributes({
        x: config.scale.x + config.scale.width,
        y: config.scale.y + config.scale.height + 14,
        "class": "scaleNumbers"
      });
    }

    /* Dashboard elements*/
    rectangle = new Node(svg, "rect");
    rectangle.setAttributes({
      x: config.dashboard.x,
      y: config.dashboard.y,
      width: config.dashboard.width,
      height: config.dashboard.height,
      id: "dashboardRectangle"
    });
    dashboardTitle = new Node(svg, "text", "Nothing selected");
    dashboardTitle.setAttributes({
      x: config.dashboard.x + 10,
      y: config.dashboard.y + 16,
      id: "dashboardTitle"
    });
    dashboardLink = new Node(svg, "a");
    dashboardLink.setAttributes({
      "xlink:href": "",
      "href": "",
      id: "dashboardLink",
      target: "_blank"
    });
    dashboardSatisfaction = new Node(svg, "text", " ");
    dashboardSatisfaction.setAttributes({
      x: config.dashboard.x + 10,
      y: config.dashboard.y + 41,
      id: "dashboardSatisfaction"
    });
    dashboardLinkText = new Node(dashboardLink, "text", " ");
    dashboardLinkText.setAttributes({
      x: config.dashboard.x + 10,
      y: config.dashboard.y + 66,
      id: "dashboardLinkText"
    });

    /* CSS*/
    svg.setEmbeddedCSS(defaultCSS, config.styling);
    return svg;
  };

}).call(this);
