// Generated by CoffeeScript 1.6.3
(function() {
  var avg, calculateEllipse, calculatePie, distance, isLeftSide, rotate, sum, toDeg, toRad;

  distance = function(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  };

  rotate = function(x, y, a) {
    return [Math.cos(a) * x - Math.sin(a) * y, Math.sin(a) * x + Math.cos(a) * y];
  };

  isLeftSide = function(xa, ya, xb, yb, xc, yc) {
    return ((xb - xa) * (yc - ya) - (yb - ya) * (xc - xa)) > 0;
  };

  toDeg = function(x) {
    return x * (180 / Math.PI);
  };

  toRad = function(x) {
    return x * (Math.PI / 180);
  };

  sum = function(arr) {
    return arr.reduce(function(a, b) {
      return a + b;
    });
  };

  avg = function(arr) {
    return sum(arr) / arr.length;
  };

  calculateEllipse = function(xa, ya, xb, yb, xc, yc) {
    var angle, opposite, oxa, oxb, oxc, oya, oyb, oyc, r1, r2, sweep, t, u, xcenter, ycenter, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    _ref = [xa, ya, xb, yb, xc, yc], oxa = _ref[0], oya = _ref[1], oxb = _ref[2], oyb = _ref[3], oxc = _ref[4], oyc = _ref[5];
    _ref1 = [(xa + xb) / 2, (ya + yb) / 2], xcenter = _ref1[0], ycenter = _ref1[1];
    r1 = distance(xa, ya, xcenter, ycenter);
    opposite = Math.abs(yb - ycenter);
    angle = Math.asin(opposite / r1);
    _ref2 = [[xa - xcenter, ya - ycenter], [xb - xcenter, yb - ycenter], [xc - xcenter, yc - ycenter]], (_ref3 = _ref2[0], xa = _ref3[0], ya = _ref3[1]), (_ref4 = _ref2[1], xb = _ref4[0], yb = _ref4[1]), (_ref5 = _ref2[2], xc = _ref5[0], yc = _ref5[1]);
    _ref6 = [rotate(xa, ya, angle), rotate(xb, yb, angle), rotate(xc, yc, angle)], (_ref7 = _ref6[0], xa = _ref7[0], ya = _ref7[1]), (_ref8 = _ref6[1], xb = _ref8[0], yb = _ref8[1]), (_ref9 = _ref6[2], xc = _ref9[0], yc = _ref9[1]);
    if (xc > r1) {
      _ref10 = [cx, yc], yc = _ref10[0], xc = _ref10[1];
    }
    t = Math.pow(xc, 2) / Math.pow(r1, 2);
    u = Math.pow(yc, 2);
    r2 = Math.sqrt(u / (1 - t));
    sweep = oya === oyb ? oxc > oxa ? (oyc < oya ? 1 : 0) : (oyc < oya ? 0 : 1) : oxa === oxb ? oya < oyb ? (oxc < oxa ? 0 : 1) : (oxc < oxa ? 1 : 0) : ((xc < 0 && yc < 0) || (xc > 0 && yc > 0) ? 0 : 1);
    return {
      r1: r1,
      r2: r2,
      xcenter: xcenter,
      ycenter: ycenter,
      angle: toDeg(angle),
      sweep: sweep
    };
  };

  calculatePie = function(xa, ya, xb, yb, xc, yc) {
    var large, r;
    large = isLeftSide(xa, ya, xb, yb, xc, yc) ? 0 : 1;
    r = (distance(xa, ya, xc, yc) + distance(xb, yb, xc, yc)) / 2;
    return {
      r: r,
      large: large
    };
  };

  module.exports = {
    calculateEllipse: calculateEllipse,
    calculatePie: calculatePie,
    avg: avg
  };

}).call(this);
